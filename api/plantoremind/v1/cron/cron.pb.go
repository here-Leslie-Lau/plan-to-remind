// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: plantoremind/v1/cron/cron.proto

package cron

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc       string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *CreateCronRequest) Reset() {
	*x = CreateCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronRequest) ProtoMessage() {}

func (x *CreateCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronRequest.ProtoReflect.Descriptor instead.
func (*CreateCronRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCronRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateCronRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type UpdateCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronRequest) Reset() {
	*x = UpdateCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronRequest) ProtoMessage() {}

func (x *UpdateCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{1}
}

type UpdateCronReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronReply) Reset() {
	*x = UpdateCronReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronReply) ProtoMessage() {}

func (x *UpdateCronReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronReply.ProtoReflect.Descriptor instead.
func (*UpdateCronReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{2}
}

type DeleteCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronRequest) Reset() {
	*x = DeleteCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronRequest) ProtoMessage() {}

func (x *DeleteCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{3}
}

type DeleteCronReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronReply) Reset() {
	*x = DeleteCronReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronReply) ProtoMessage() {}

func (x *DeleteCronReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronReply.ProtoReflect.Descriptor instead.
func (*DeleteCronReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{4}
}

type GetCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCronRequest) Reset() {
	*x = GetCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronRequest) ProtoMessage() {}

func (x *GetCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronRequest.ProtoReflect.Descriptor instead.
func (*GetCronRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{5}
}

type GetCronReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCronReply) Reset() {
	*x = GetCronReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronReply) ProtoMessage() {}

func (x *GetCronReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronReply.ProtoReflect.Descriptor instead.
func (*GetCronReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{6}
}

type ListCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCronRequest) Reset() {
	*x = ListCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronRequest) ProtoMessage() {}

func (x *ListCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronRequest.ProtoReflect.Descriptor instead.
func (*ListCronRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{7}
}

type ListCronReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCronReply) Reset() {
	*x = ListCronReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronReply) ProtoMessage() {}

func (x *ListCronReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_cron_cron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronReply.ProtoReflect.Descriptor instead.
func (*ListCronReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_cron_cron_proto_rawDescGZIP(), []int{8}
}

var File_plantoremind_v1_cron_cron_proto protoreflect.FileDescriptor

var file_plantoremind_v1_cron_cron_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x59, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x11, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x32, 0x82, 0x04, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x64, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x2e, 0x5a, 0x2c, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x6f,
	0x2d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x3b, 0x63, 0x72, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plantoremind_v1_cron_cron_proto_rawDescOnce sync.Once
	file_plantoremind_v1_cron_cron_proto_rawDescData = file_plantoremind_v1_cron_cron_proto_rawDesc
)

func file_plantoremind_v1_cron_cron_proto_rawDescGZIP() []byte {
	file_plantoremind_v1_cron_cron_proto_rawDescOnce.Do(func() {
		file_plantoremind_v1_cron_cron_proto_rawDescData = protoimpl.X.CompressGZIP(file_plantoremind_v1_cron_cron_proto_rawDescData)
	})
	return file_plantoremind_v1_cron_cron_proto_rawDescData
}

var file_plantoremind_v1_cron_cron_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_plantoremind_v1_cron_cron_proto_goTypes = []interface{}{
	(*CreateCronRequest)(nil), // 0: api.plantoremind.v1.cron.CreateCronRequest
	(*UpdateCronRequest)(nil), // 1: api.plantoremind.v1.cron.UpdateCronRequest
	(*UpdateCronReply)(nil),   // 2: api.plantoremind.v1.cron.UpdateCronReply
	(*DeleteCronRequest)(nil), // 3: api.plantoremind.v1.cron.DeleteCronRequest
	(*DeleteCronReply)(nil),   // 4: api.plantoremind.v1.cron.DeleteCronReply
	(*GetCronRequest)(nil),    // 5: api.plantoremind.v1.cron.GetCronRequest
	(*GetCronReply)(nil),      // 6: api.plantoremind.v1.cron.GetCronReply
	(*ListCronRequest)(nil),   // 7: api.plantoremind.v1.cron.ListCronRequest
	(*ListCronReply)(nil),     // 8: api.plantoremind.v1.cron.ListCronReply
	(*emptypb.Empty)(nil),     // 9: google.protobuf.Empty
}
var file_plantoremind_v1_cron_cron_proto_depIdxs = []int32{
	0, // 0: api.plantoremind.v1.cron.Cron.CreateCron:input_type -> api.plantoremind.v1.cron.CreateCronRequest
	1, // 1: api.plantoremind.v1.cron.Cron.UpdateCron:input_type -> api.plantoremind.v1.cron.UpdateCronRequest
	3, // 2: api.plantoremind.v1.cron.Cron.DeleteCron:input_type -> api.plantoremind.v1.cron.DeleteCronRequest
	5, // 3: api.plantoremind.v1.cron.Cron.GetCron:input_type -> api.plantoremind.v1.cron.GetCronRequest
	7, // 4: api.plantoremind.v1.cron.Cron.ListCron:input_type -> api.plantoremind.v1.cron.ListCronRequest
	9, // 5: api.plantoremind.v1.cron.Cron.CreateCron:output_type -> google.protobuf.Empty
	2, // 6: api.plantoremind.v1.cron.Cron.UpdateCron:output_type -> api.plantoremind.v1.cron.UpdateCronReply
	4, // 7: api.plantoremind.v1.cron.Cron.DeleteCron:output_type -> api.plantoremind.v1.cron.DeleteCronReply
	6, // 8: api.plantoremind.v1.cron.Cron.GetCron:output_type -> api.plantoremind.v1.cron.GetCronReply
	8, // 9: api.plantoremind.v1.cron.Cron.ListCron:output_type -> api.plantoremind.v1.cron.ListCronReply
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_plantoremind_v1_cron_cron_proto_init() }
func file_plantoremind_v1_cron_cron_proto_init() {
	if File_plantoremind_v1_cron_cron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plantoremind_v1_cron_cron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_cron_cron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plantoremind_v1_cron_cron_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plantoremind_v1_cron_cron_proto_goTypes,
		DependencyIndexes: file_plantoremind_v1_cron_cron_proto_depIdxs,
		MessageInfos:      file_plantoremind_v1_cron_cron_proto_msgTypes,
	}.Build()
	File_plantoremind_v1_cron_cron_proto = out.File
	file_plantoremind_v1_cron_cron_proto_rawDesc = nil
	file_plantoremind_v1_cron_cron_proto_goTypes = nil
	file_plantoremind_v1_cron_cron_proto_depIdxs = nil
}
