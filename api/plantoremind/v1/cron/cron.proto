syntax = "proto3";

package api.plantoremind.v1.cron;

//import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

option go_package = "plan-to-remind/api/plantoremind/v1/cron;cron";

service Cron {
  rpc CreateCron (CreateCronRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/cron/create"
      body: "*"
    };
  };
  rpc UpdateCron (UpdateCronRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/cron/update"
      body: "*"
    };
  };
  rpc DeleteCron (DeleteCronRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/cron/delete"
      body: "*"
    };
  };
  rpc GetCron (GetCronRequest) returns (GetCronReply) {
    option (google.api.http) = {
      post: "/api/v1/cron/get"
      body: "*"
    };
  };
  rpc ListCron (ListCronRequest) returns (ListCronReply) {
    option (google.api.http) = {
      post: "/api/v1/cron/list"
      body: "*"
    };
  };
}

message CreateCronRequest {
  string desc = 1 [(validate.rules).string.min_len = 1];
  string expression = 2 [(validate.rules).string.min_len = 1];
}

message UpdateCronRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  // 时间描述
  string desc = 2;
  // cron表达式
  string expression = 3;
}

message DeleteCronRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

message CronData {
  // id
  uint64 id = 1;
  string desc = 2;
  // cron表达式
  string expression = 3;
}

message GetCronRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}
message GetCronReply {
  CronData data = 1;
}

message ListCronRequest {
  // 偏移量
  int64 offset = 1;
  // 每页多少条
  int64 limit = 2;
  // 排序
  string order_by = 3;
}
message ListCronReply {
  repeated CronData list = 1;
}
