// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: plantoremind/v1/cron/cron.proto

package cron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CronClient is the client API for Cron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CronClient interface {
	CreateCron(ctx context.Context, in *CreateCronRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCron(ctx context.Context, in *UpdateCronRequest, opts ...grpc.CallOption) (*UpdateCronReply, error)
	DeleteCron(ctx context.Context, in *DeleteCronRequest, opts ...grpc.CallOption) (*DeleteCronReply, error)
	GetCron(ctx context.Context, in *GetCronRequest, opts ...grpc.CallOption) (*GetCronReply, error)
	ListCron(ctx context.Context, in *ListCronRequest, opts ...grpc.CallOption) (*ListCronReply, error)
}

type cronClient struct {
	cc grpc.ClientConnInterface
}

func NewCronClient(cc grpc.ClientConnInterface) CronClient {
	return &cronClient{cc}
}

func (c *cronClient) CreateCron(ctx context.Context, in *CreateCronRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.plantoremind.v1.cron.Cron/CreateCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronClient) UpdateCron(ctx context.Context, in *UpdateCronRequest, opts ...grpc.CallOption) (*UpdateCronReply, error) {
	out := new(UpdateCronReply)
	err := c.cc.Invoke(ctx, "/api.plantoremind.v1.cron.Cron/UpdateCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronClient) DeleteCron(ctx context.Context, in *DeleteCronRequest, opts ...grpc.CallOption) (*DeleteCronReply, error) {
	out := new(DeleteCronReply)
	err := c.cc.Invoke(ctx, "/api.plantoremind.v1.cron.Cron/DeleteCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronClient) GetCron(ctx context.Context, in *GetCronRequest, opts ...grpc.CallOption) (*GetCronReply, error) {
	out := new(GetCronReply)
	err := c.cc.Invoke(ctx, "/api.plantoremind.v1.cron.Cron/GetCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronClient) ListCron(ctx context.Context, in *ListCronRequest, opts ...grpc.CallOption) (*ListCronReply, error) {
	out := new(ListCronReply)
	err := c.cc.Invoke(ctx, "/api.plantoremind.v1.cron.Cron/ListCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronServer is the server API for Cron service.
// All implementations must embed UnimplementedCronServer
// for forward compatibility
type CronServer interface {
	CreateCron(context.Context, *CreateCronRequest) (*emptypb.Empty, error)
	UpdateCron(context.Context, *UpdateCronRequest) (*UpdateCronReply, error)
	DeleteCron(context.Context, *DeleteCronRequest) (*DeleteCronReply, error)
	GetCron(context.Context, *GetCronRequest) (*GetCronReply, error)
	ListCron(context.Context, *ListCronRequest) (*ListCronReply, error)
	mustEmbedUnimplementedCronServer()
}

// UnimplementedCronServer must be embedded to have forward compatible implementations.
type UnimplementedCronServer struct {
}

func (UnimplementedCronServer) CreateCron(context.Context, *CreateCronRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCron not implemented")
}
func (UnimplementedCronServer) UpdateCron(context.Context, *UpdateCronRequest) (*UpdateCronReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCron not implemented")
}
func (UnimplementedCronServer) DeleteCron(context.Context, *DeleteCronRequest) (*DeleteCronReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCron not implemented")
}
func (UnimplementedCronServer) GetCron(context.Context, *GetCronRequest) (*GetCronReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCron not implemented")
}
func (UnimplementedCronServer) ListCron(context.Context, *ListCronRequest) (*ListCronReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCron not implemented")
}
func (UnimplementedCronServer) mustEmbedUnimplementedCronServer() {}

// UnsafeCronServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CronServer will
// result in compilation errors.
type UnsafeCronServer interface {
	mustEmbedUnimplementedCronServer()
}

func RegisterCronServer(s grpc.ServiceRegistrar, srv CronServer) {
	s.RegisterService(&Cron_ServiceDesc, srv)
}

func _Cron_CreateCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronServer).CreateCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plantoremind.v1.cron.Cron/CreateCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronServer).CreateCron(ctx, req.(*CreateCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cron_UpdateCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronServer).UpdateCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plantoremind.v1.cron.Cron/UpdateCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronServer).UpdateCron(ctx, req.(*UpdateCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cron_DeleteCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronServer).DeleteCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plantoremind.v1.cron.Cron/DeleteCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronServer).DeleteCron(ctx, req.(*DeleteCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cron_GetCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronServer).GetCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plantoremind.v1.cron.Cron/GetCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronServer).GetCron(ctx, req.(*GetCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cron_ListCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronServer).ListCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.plantoremind.v1.cron.Cron/ListCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronServer).ListCron(ctx, req.(*ListCronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cron_ServiceDesc is the grpc.ServiceDesc for Cron service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cron_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.plantoremind.v1.cron.Cron",
	HandlerType: (*CronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCron",
			Handler:    _Cron_CreateCron_Handler,
		},
		{
			MethodName: "UpdateCron",
			Handler:    _Cron_UpdateCron_Handler,
		},
		{
			MethodName: "DeleteCron",
			Handler:    _Cron_DeleteCron_Handler,
		},
		{
			MethodName: "GetCron",
			Handler:    _Cron_GetCron_Handler,
		},
		{
			MethodName: "ListCron",
			Handler:    _Cron_ListCron_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plantoremind/v1/cron/cron.proto",
}
