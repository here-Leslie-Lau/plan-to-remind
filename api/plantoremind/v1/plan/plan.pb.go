// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: plantoremind/v1/plan/plan.proto

package plan

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 计划开关状态
	State uint32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	// 计划等级
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	// 计划时间表ID
	CronId uint64 `protobuf:"varint,3,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
	// 失效时间 example:(2006-01-02 15::04:05)
	DeadTime string `protobuf:"bytes,4,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreatePlanRequest) Reset() {
	*x = CreatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRequest) ProtoMessage() {}

func (x *CreatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePlanRequest) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CreatePlanRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CreatePlanRequest) GetCronId() uint64 {
	if x != nil {
		return x.CronId
	}
	return 0
}

func (x *CreatePlanRequest) GetDeadTime() string {
	if x != nil {
		return x.DeadTime
	}
	return ""
}

func (x *CreatePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 状态
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// 等级
	Level uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	// 计划时间表ID
	CronId uint64 `protobuf:"varint,4,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
	// 计划失效时间 format:2006-01-02
	DeadTime string `protobuf:"bytes,5,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	// 计划名称
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdatePlanRequest) Reset() {
	*x = UpdatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanRequest) ProtoMessage() {}

func (x *UpdatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePlanRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlanRequest) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *UpdatePlanRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdatePlanRequest) GetCronId() uint64 {
	if x != nil {
		return x.CronId
	}
	return 0
}

func (x *UpdatePlanRequest) GetDeadTime() string {
	if x != nil {
		return x.DeadTime
	}
	return ""
}

func (x *UpdatePlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeletePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlanRequest) Reset() {
	*x = DeletePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRequest) ProtoMessage() {}

func (x *DeletePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{2}
}

type DeletePlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlanReply) Reset() {
	*x = DeletePlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanReply) ProtoMessage() {}

func (x *DeletePlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanReply.ProtoReflect.Descriptor instead.
func (*DeletePlanReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{3}
}

type PlanData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 状态
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// 等级
	Level uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	// 计划时间表ID
	CronId uint64 `protobuf:"varint,4,opt,name=cron_id,json=cronId,proto3" json:"cron_id,omitempty"`
	// 计划失效时间
	DeadTime int64 `protobuf:"varint,5,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	// 计划名称
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// 计划时间表描述
	CronDesc string `protobuf:"bytes,7,opt,name=cron_desc,json=cronDesc,proto3" json:"cron_desc,omitempty"`
}

func (x *PlanData) Reset() {
	*x = PlanData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanData) ProtoMessage() {}

func (x *PlanData) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanData.ProtoReflect.Descriptor instead.
func (*PlanData) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{4}
}

func (x *PlanData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlanData) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PlanData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlanData) GetCronId() uint64 {
	if x != nil {
		return x.CronId
	}
	return 0
}

func (x *PlanData) GetDeadTime() int64 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *PlanData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanData) GetCronDesc() string {
	if x != nil {
		return x.CronDesc
	}
	return ""
}

type GetPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlanRequest) Reset() {
	*x = GetPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRequest) ProtoMessage() {}

func (x *GetPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{5}
}

func (x *GetPlanRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan *PlanData `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *GetPlanReply) Reset() {
	*x = GetPlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanReply) ProtoMessage() {}

func (x *GetPlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanReply.ProtoReflect.Descriptor instead.
func (*GetPlanReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlanReply) GetPlan() *PlanData {
	if x != nil {
		return x.Plan
	}
	return nil
}

type ListPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPlanRequest) Reset() {
	*x = ListPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanRequest) ProtoMessage() {}

func (x *ListPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanRequest.ProtoReflect.Descriptor instead.
func (*ListPlanRequest) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{7}
}

type ListPlanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPlanReply) Reset() {
	*x = ListPlanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanReply) ProtoMessage() {}

func (x *ListPlanReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantoremind_v1_plan_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanReply.ProtoReflect.Descriptor instead.
func (*ListPlanReply) Descriptor() ([]byte, []int) {
	return file_plantoremind_v1_plan_plan_proto_rawDescGZIP(), []int{8}
}

var File_plantoremind_v1_plan_plan_proto protoreflect.FileDescriptor

var file_plantoremind_v1_plan_plan_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa8, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x08, 0x28, 0x01,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x46, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xac,
	0x04, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x78, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x2e, 0x5a,
	0x2c, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x6f, 0x2d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plantoremind_v1_plan_plan_proto_rawDescOnce sync.Once
	file_plantoremind_v1_plan_plan_proto_rawDescData = file_plantoremind_v1_plan_plan_proto_rawDesc
)

func file_plantoremind_v1_plan_plan_proto_rawDescGZIP() []byte {
	file_plantoremind_v1_plan_plan_proto_rawDescOnce.Do(func() {
		file_plantoremind_v1_plan_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_plantoremind_v1_plan_plan_proto_rawDescData)
	})
	return file_plantoremind_v1_plan_plan_proto_rawDescData
}

var file_plantoremind_v1_plan_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_plantoremind_v1_plan_plan_proto_goTypes = []interface{}{
	(*CreatePlanRequest)(nil), // 0: api.plantoremind.v1.plan.CreatePlanRequest
	(*UpdatePlanRequest)(nil), // 1: api.plantoremind.v1.plan.UpdatePlanRequest
	(*DeletePlanRequest)(nil), // 2: api.plantoremind.v1.plan.DeletePlanRequest
	(*DeletePlanReply)(nil),   // 3: api.plantoremind.v1.plan.DeletePlanReply
	(*PlanData)(nil),          // 4: api.plantoremind.v1.plan.PlanData
	(*GetPlanRequest)(nil),    // 5: api.plantoremind.v1.plan.GetPlanRequest
	(*GetPlanReply)(nil),      // 6: api.plantoremind.v1.plan.GetPlanReply
	(*ListPlanRequest)(nil),   // 7: api.plantoremind.v1.plan.ListPlanRequest
	(*ListPlanReply)(nil),     // 8: api.plantoremind.v1.plan.ListPlanReply
	(*emptypb.Empty)(nil),     // 9: google.protobuf.Empty
}
var file_plantoremind_v1_plan_plan_proto_depIdxs = []int32{
	4, // 0: api.plantoremind.v1.plan.GetPlanReply.plan:type_name -> api.plantoremind.v1.plan.PlanData
	0, // 1: api.plantoremind.v1.plan.Plan.CreatePlan:input_type -> api.plantoremind.v1.plan.CreatePlanRequest
	1, // 2: api.plantoremind.v1.plan.Plan.UpdatePlan:input_type -> api.plantoremind.v1.plan.UpdatePlanRequest
	2, // 3: api.plantoremind.v1.plan.Plan.DeletePlan:input_type -> api.plantoremind.v1.plan.DeletePlanRequest
	5, // 4: api.plantoremind.v1.plan.Plan.GetPlan:input_type -> api.plantoremind.v1.plan.GetPlanRequest
	7, // 5: api.plantoremind.v1.plan.Plan.ListPlan:input_type -> api.plantoremind.v1.plan.ListPlanRequest
	9, // 6: api.plantoremind.v1.plan.Plan.CreatePlan:output_type -> google.protobuf.Empty
	9, // 7: api.plantoremind.v1.plan.Plan.UpdatePlan:output_type -> google.protobuf.Empty
	3, // 8: api.plantoremind.v1.plan.Plan.DeletePlan:output_type -> api.plantoremind.v1.plan.DeletePlanReply
	6, // 9: api.plantoremind.v1.plan.Plan.GetPlan:output_type -> api.plantoremind.v1.plan.GetPlanReply
	8, // 10: api.plantoremind.v1.plan.Plan.ListPlan:output_type -> api.plantoremind.v1.plan.ListPlanReply
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_plantoremind_v1_plan_plan_proto_init() }
func file_plantoremind_v1_plan_plan_proto_init() {
	if File_plantoremind_v1_plan_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plantoremind_v1_plan_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantoremind_v1_plan_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plantoremind_v1_plan_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plantoremind_v1_plan_plan_proto_goTypes,
		DependencyIndexes: file_plantoremind_v1_plan_plan_proto_depIdxs,
		MessageInfos:      file_plantoremind_v1_plan_plan_proto_msgTypes,
	}.Build()
	File_plantoremind_v1_plan_plan_proto = out.File
	file_plantoremind_v1_plan_plan_proto_rawDesc = nil
	file_plantoremind_v1_plan_plan_proto_goTypes = nil
	file_plantoremind_v1_plan_plan_proto_depIdxs = nil
}
