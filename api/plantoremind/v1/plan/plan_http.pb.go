// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package plan

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type PlanHTTPServer interface {
	CompletePlan(context.Context, *CompletePlanRequest) (*emptypb.Empty, error)
	CreatePlan(context.Context, *CreatePlanRequest) (*emptypb.Empty, error)
	DeletePlan(context.Context, *DeletePlanRequest) (*emptypb.Empty, error)
	GetPlan(context.Context, *GetPlanRequest) (*GetPlanReply, error)
	ListPlan(context.Context, *ListPlanRequest) (*ListPlanReply, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*emptypb.Empty, error)
}

func RegisterPlanHTTPServer(s *http.Server, srv PlanHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/plan/create", _Plan_CreatePlan0_HTTP_Handler(srv))
	r.POST("/api/v1/plan/update", _Plan_UpdatePlan0_HTTP_Handler(srv))
	r.POST("/api/v1/plan/delete", _Plan_DeletePlan0_HTTP_Handler(srv))
	r.POST("/api/v1/plan/get", _Plan_GetPlan0_HTTP_Handler(srv))
	r.POST("/api/v1/plan/list", _Plan_ListPlan0_HTTP_Handler(srv))
	r.GET("/api/v1/plan/complete", _Plan_CompletePlan0_HTTP_Handler(srv))
}

func _Plan_CreatePlan0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.plantoremind.v1.plan.Plan/CreatePlan")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlan(ctx, req.(*CreatePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Plan_UpdatePlan0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.plantoremind.v1.plan.Plan/UpdatePlan")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePlan(ctx, req.(*UpdatePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Plan_DeletePlan0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.plantoremind.v1.plan.Plan/DeletePlan")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePlan(ctx, req.(*DeletePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Plan_GetPlan0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.plantoremind.v1.plan.Plan/GetPlan")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlan(ctx, req.(*GetPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPlanReply)
		return ctx.Result(200, reply)
	}
}

func _Plan_ListPlan0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.plantoremind.v1.plan.Plan/ListPlan")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPlan(ctx, req.(*ListPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPlanReply)
		return ctx.Result(200, reply)
	}
}

func _Plan_CompletePlan0_HTTP_Handler(srv PlanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompletePlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.plantoremind.v1.plan.Plan/CompletePlan")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CompletePlan(ctx, req.(*CompletePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type PlanHTTPClient interface {
	CompletePlan(ctx context.Context, req *CompletePlanRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreatePlan(ctx context.Context, req *CreatePlanRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeletePlan(ctx context.Context, req *DeletePlanRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetPlan(ctx context.Context, req *GetPlanRequest, opts ...http.CallOption) (rsp *GetPlanReply, err error)
	ListPlan(ctx context.Context, req *ListPlanRequest, opts ...http.CallOption) (rsp *ListPlanReply, err error)
	UpdatePlan(ctx context.Context, req *UpdatePlanRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type PlanHTTPClientImpl struct {
	cc *http.Client
}

func NewPlanHTTPClient(client *http.Client) PlanHTTPClient {
	return &PlanHTTPClientImpl{client}
}

func (c *PlanHTTPClientImpl) CompletePlan(ctx context.Context, in *CompletePlanRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/plan/complete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.plantoremind.v1.plan.Plan/CompletePlan"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/plan/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.plantoremind.v1.plan.Plan/CreatePlan"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/plan/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.plantoremind.v1.plan.Plan/DeletePlan"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...http.CallOption) (*GetPlanReply, error) {
	var out GetPlanReply
	pattern := "/api/v1/plan/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.plantoremind.v1.plan.Plan/GetPlan"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) ListPlan(ctx context.Context, in *ListPlanRequest, opts ...http.CallOption) (*ListPlanReply, error) {
	var out ListPlanReply
	pattern := "/api/v1/plan/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.plantoremind.v1.plan.Plan/ListPlan"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanHTTPClientImpl) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/plan/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.plantoremind.v1.plan.Plan/UpdatePlan"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
